# Copyright 2018 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

# For training on Imagenet Video with LSTM Mobilenet V1

[lstm_object_detection.protos.lstm_model] {
  train_unroll_length: 10
  eval_unroll_length: 10
}

model {
  ssd {
    num_classes: 1  # Num of class for imagenet vid dataset.
    box_coder {
      faster_rcnn_box_coder {
        y_scale: 10.0
        x_scale: 10.0
        height_scale: 5.0
        width_scale: 5.0
      }
    }
    matcher {
      argmax_matcher {
        matched_threshold: 0.5
        unmatched_threshold: 0.5
        ignore_thresholds: false
        negatives_lower_than_unmatched: true
        force_match_for_each_row: true
      }
    }
    similarity_calculator {
      iou_similarity {
      }
    }
    anchor_generator {
      ssd_anchor_generator {
        num_layers: 5
        min_scale: 0.2
        max_scale: 0.95
        aspect_ratios: 1.0
        aspect_ratios: 2.0
        aspect_ratios: 0.5
        aspect_ratios: 3.0
        aspect_ratios: 0.3333
      }
    }
    image_resizer {
      fixed_shape_resizer {
        height: 160
        width: 160
      }
    }
    box_predictor {
      convolutional_box_predictor {
        min_depth: 0
        max_depth: 0
        num_layers_before_predictor: 3
        use_dropout: false
        dropout_keep_probability: 0.8
        kernel_size: 3
        box_code_size: 4
        apply_sigmoid_to_scores: false
        use_depthwise: true
        conv_hyperparams {
          activation: RELU_6,
          regularizer {
            l2_regularizer {
              weight: 0.00004
            }
          }
          initializer {
            truncated_normal_initializer {
              stddev: 0.03
              mean: 0.0
            }
          }
          batch_norm {
            train: true,
            scale: true,
            center: true,
            decay: 0.9997,
            epsilon: 0.001,
          }
        }
      }
    }
    feature_extractor {
      type: 'lstm_ssd_mobilenet_v1'
      min_depth: 16
      depth_multiplier: 1.0
      use_depthwise: true
      conv_hyperparams {
        activation: RELU_6,
        regularizer {
          l2_regularizer {
            weight: 0.00004
          }
        }
        initializer {
          truncated_normal_initializer {
            stddev: 0.03
            mean: 0.0
          }
        }
        batch_norm {
          train: true,
          scale: true,
          center: true,
          decay: 0.9997,
          epsilon: 0.001,
        }
      }
    }
    loss {
      classification_loss {
        weighted_sigmoid {
        }
      }
      localization_loss {
        weighted_smooth_l1 {
        }
      }
      hard_example_miner {
        num_hard_examples: 3000
        iou_threshold: 0.99
        loss_type: CLASSIFICATION
        max_negatives_per_positive: 3
        min_negatives_per_image: 0
      }
      classification_weight: 1.0
      localization_weight: 4.0
    }
    normalize_loss_by_num_matches: true
    post_processing {
      batch_non_max_suppression {
        score_threshold: -20.0
        iou_threshold: 0.5
        max_detections_per_class: 100
        max_total_detections: 100
      }
      score_converter: SIGMOID
    }
  }
}

train_config: {
  batch_size: 4
  data_augmentation_options {
    random_horizontal_flip {
    }
  }
  optimizer {
    use_moving_average: false
    rms_prop_optimizer: {
      learning_rate: {
        exponential_decay_learning_rate {
          initial_learning_rate: 0.002
          decay_steps: 10000
          decay_factor: 0.95
        }
      }
      momentum_optimizer_value: 0.9
      decay: 0.9
      epsilon: 1.0
    }
  }

  from_detection_checkpoint: true
  gradient_clipping_by_norm: 10.0
  batch_queue_capacity: 20
  prefetch_queue_capacity: 10
  fine_tune_checkpoint: "pre-trained-models/ssd_mobilenet_v1_coco_2018_01_28/model.ckpt"
  fine_tune_checkpoint_type: "detection"
}


train_input_reader: {
  shuffle_buffer_size: 40
  queue_capacity: 20
  prefetch_size: 20
  min_after_dequeue: 10
  label_map_path: "annotations/EPFL_label_map.pbtxt"
  external_input_reader {
    [lstm_object_detection.protos.GoogleInputReader.google_input_reader] {
      tf_record_video_input_reader: {
        input_path: ["annotations/shards/train-EPFL-00.record","annotations/shards/train-EPFL-01.record",
		"annotations/shards/train-EPFL-02.record","annotations/shards/train-EPFL-03.record",
		"annotations/shards/train-EPFL-04.record","annotations/shards/train-EPFL-05.record",
		"annotations/shards/train-EPFL-06.record","annotations/shards/train-EPFL-07.record",
		"annotations/shards/train-EPFL-08.record","annotations/shards/train-EPFL-09.record",
		"annotations/shards/train-EPFL-10.record","annotations/shards/train-EPFL-11.record",
		"annotations/shards/train-EPFL-12.record","annotations/shards/train-EPFL-13.record",
		"annotations/shards/train-EPFL-14.record","annotations/shards/train-EPFL-15.record",
		"annotations/shards/train-EPFL-16.record","annotations/shards/train-EPFL-17.record",
		"annotations/shards/train-EPFL-18.record","annotations/shards/train-EPFL-19.record",
		"annotations/shards/train-EPFL-20.record","annotations/shards/train-EPFL-21.record",
		"annotations/shards/train-EPFL-22.record","annotations/shards/train-EPFL-23.record",
		"annotations/shards/train-EPFL-24.record","annotations/shards/train-EPFL-25.record",
		"annotations/shards/train-EPFL-26.record","annotations/shards/train-EPFL-27.record",
		"annotations/shards/train-EPFL-28.record","annotations/shards/train-EPFL-29.record"]
        data_type: TF_SEQUENCE_EXAMPLE
        video_length: 10
      }
    }
  }
}

eval_config: {
  metrics_set: "coco_evaluation_all_frames"
  use_moving_averages: true
  min_score_threshold: 0.5
  max_num_boxes_to_visualize: 300
  visualize_groundtruth_boxes: true
  groundtruth_box_visualization_color: "red"
}

eval_input_reader: {
  label_map_path: "annotations/EPFL_label_map.pbtxt"
  external_input_reader {
    [lstm_object_detection.protos.GoogleInputReader.google_input_reader] {
      tf_record_video_input_reader: {
        input_path: "annotations/test-EPFL-0.record"
        data_type: TF_SEQUENCE_EXAMPLE
        video_length: 10
      }
    }
  }
  shuffle: true
  num_readers: 1
}
